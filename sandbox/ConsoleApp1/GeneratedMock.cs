//// <auto-generated/>
//#nullable enable
//#pragma warning disable CS0108
//#pragma warning disable CS0162
//#pragma warning disable CS0164
//#pragma warning disable CS0219
//#pragma warning disable CS8600
//#pragma warning disable CS8601
//#pragma warning disable CS8602
//#pragma warning disable CS8604
//#pragma warning disable CS8619
//#pragma warning disable CS8620
//#pragma warning disable CS8631
//#pragma warning disable CS8765
//#pragma warning disable CS9074
//#pragma warning disable CA1050

//using Claudia;
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Text.Json;
//using System.Threading.Tasks;
//using System.Xml.Linq;

//static partial class FunctionTools
//{




//#pragma warning disable CS1998
//    public static async ValueTask<Content[]> InvokeToolAsync(MessageResponse message)
//    {
//        var result = new List<Content>();

//        foreach (var item in message.Content)
//        {
//            if (item.Type != ContentTypes.ToolUse) continue;

//            switch (item.ToolUseName)
//            {
//                case "TimeOfDay":
//                    {
//                        // if (!item.ToolUseInput.TryGetValue("timeZone", out var _0)) _0 = default;
//                        var _0 = GetValueOrDefault<string>(item, "timeZone", default!);
//                        string? _callResult;
//                        bool? _isError = null;
//                        try
//                        {
//                            _callResult = TimeOfDay(_0).ToString();
//                        }
//                        catch (Exception ex)
//                        {
//                            _callResult = ex.Message;
//                            _isError = true;
//                        }

//                        result.Add(new Content
//                        {
//                            Type = ContentTypes.ToolResult,
//                            ToolUseId = item.ToolUseId,
//                            ToolResultContent = _callResult,
//                            ToolResultIsError = _isError
//                        });

//                        break;
//                    }
//                default:
//                    break;
//            }
//        }

//        return result.ToArray();

//        static T GetValueOrDefault<T>(Content content, string name, T defaultValue)
//        {
//            if (content.ToolUseInput.TryGetValue(name, out var stringValue))
//            {
//                return System.Text.Json.JsonSerializer.Deserialize<T>(stringValue)!;
//            }
//            else
//            {
//                return defaultValue;
//            }
//        }
//    }

//#pragma warning restore CS1998
//}

