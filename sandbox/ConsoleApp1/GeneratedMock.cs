//// <auto-generated/>
//#nullable enable
//#pragma warning disable CS0108
//#pragma warning disable CS0162
//#pragma warning disable CS0164
//#pragma warning disable CS0219
//#pragma warning disable CS8600
//#pragma warning disable CS8601
//#pragma warning disable CS8602
//#pragma warning disable CS8604
//#pragma warning disable CS8619
//#pragma warning disable CS8620
//#pragma warning disable CS8631
//#pragma warning disable CS8765
//#pragma warning disable CS9074
//#pragma warning disable CA1050

//using Claudia;
//using System;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;
//using System.Xml.Linq;

//static partial class FunctionTools
//{

//    public const string SystemPrompt = @$"
//In this environment you have access to a set of tools you can use to answer the user's question.

//You may call them like this:
//<function_calls>
//    <invoke>
//        <tool_name>$TOOL_NAME</tool_name>
//        <parameters>
//            <$PARAMETER_NAME>$PARAMETER_VALUE</$PARAMETER_NAME>
//            ...
//        </parameters>
//    </invoke>
//</function_calls>

//Here are the tools available:

//{PromptXml.ToolsAll}
//";

//    public static class PromptXml
//    {
//        public const string ToolsAll = @$"
//{Sum}
//";

//        public const string Sum = @"
//<tool_description>
//  <tool_name>Sum</tool_name>
//  <description>foobarbaz</description>
//  <parameters>
//    <parameter>
//      <name>x</name>
//      <type>int</type>
//      <description>p1</description>
//    </parameter>
//    <parameter>
//      <name>y</name>
//      <type>int</type>
//      <description>p2</description>
//    </parameter>
//  </parameters>
//</tool_description>
//";


//#pragma warning disable CS1998
//        public static async ValueTask<string?> InvokeAsync(MessageResponse message)
//        {
//            var text = message.Content[0].Text!;
//            var tagStart = text.IndexOf("<function_calls>");
//            if (tagStart == -1) return null;

//            var functionCalls = text.Substring(tagStart) + "</function_calls>";
//            var xmlResult = XElement.Parse(functionCalls);

//            var sb = new StringBuilder();
//            sb.AppendLine(functionCalls);
//            sb.AppendLine("<function_results>");

//            foreach (var item in xmlResult.Elements("invoke"))
//            {
//                var name = (string)item.Element("tool_name")!;
//                switch (name)
//                {
//                    case "Sum":
//                        {
//                            var parameters = item.Element("parameters")!;

//                            var _0 = (int)parameters.Element("x")!;
//                            var _1 = (int)parameters.Element("y")!;

//                            BuildResult(sb, "Sum", Sum(_0, _1));
//                            break;
//                        }

//                    default:
//                        break;
//                }
//            }

//            sb.AppendLine("</function_results>");

//            return sb.ToString();

//            static void BuildResult<T>(StringBuilder sb, string toolName, T result)
//            {
//                sb.AppendLine(@$"
//    <result>
//        <tool_name>{toolName}</tool_name>
//        <stdout>
//            {result}
//        </stdout>
//    </result>
//");
//            }
//        }
//#pragma warning restore CS1998
//    }
//}

